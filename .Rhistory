hist(quakes$mag)
hist(quakes$mag,probability = T,main="histogram with density line")
lines(density(quakes$mag))
par(op)
library(ggplot2)
head(iris)
qplot(Sepal.Length,Petal.Length,data=iris)
qplot(Sepal.Length,Petal.Length,data=iris,color=Species,size=Petal.Width)
qplot(Sepal.Length,Petal.Length,data=iris,geom="line",color=Species)
qplot(age,circumference,data=Orange,geom="line",colour=Tree,main="How does ~~"
qplot(age,circumference,data=Orange,geom="line",colour=Tree,main="How does ~~")
qplot(age,circumference,data=Orange,geom="line",colour=Tree,main="How does ~~")
a=qplot(Sepal.Length,Petal.Length,data=iris)#분석 용 회귀 분석 라인 추가
a+geom_abline(intercept = 0,slop=1) #절편 0, 기울기 1/y=a+bx
a=qplot(Sepal.Length,Petal.Length,data=iris)#분석 용 회귀 분석 라인 추가
a+geom_abline(intercept = 0,slope=1) #절편 0, 기울기 1/y=a+bx
a+geom_abline(intercept = 4,slope=1) #절편 0, 기울기 1/y=a+bx
a=qplot(Sepal.Length,Petal.Length,data=iris)#분석 용 회귀 분석 라인 추가
a+geom_abline(intercept = 4,slope=1) #절편 0, 기울기 1/y=a+bx
a+geom_abline(intercept = -4,slope=1) #절편 0, 기울기 1/y=a+bx
y=outer(x1,x2,FUN="^")
y
y=outer(x1,x2,FUN=f)
x1=seq(-3,3,length=50)
x2=seq(-4,4,length=60)
f=function(x1,x2){
x1^2+x2^2+x1*x2
}
y
x1
x2
f=function(x1,x2){
x1^2+x2^2+2*x1*x2
}
y=outer(x1,x2,FUN=f)
contour(x1,x2,y)
x1=seq(-3,3,length=50)
x2=seq(-4,4,length=60)
f=function(x1,x2){
x1^2+x2^2+2*x1*x2
}
y=outer(x1,x2,FUN=f)
contour(x1,x2,y)
x1^2+x2^2+*x1*x2
y=outer(x1,x2,FUN=f)
contour(x1,x2,y)
x1^2+x2^2+x1*x2
f=function(x1,x2){
x1^2+x2^2+x1*x2
}
y=outer(x1,x2,FUN=f)
contour(x1,x2,y)
x1
x2
f=function(x1,x2){
x1^2+x2^2+x1*x2
}
y=outer(x1,x2,FUN=f)#외적
persp(x1,x2,y)
x1^2+x2^2+2*x1*x2
f=function(x1,x2){
x1^2+x2^2+2*x1*x2
}
y=outer(x1,x2,FUN=f)#외적
persp(x1,x2,y)
x1^2+x2^2
y=outer(x1,x2,FUN=f)
contour(x1,x2,y)
f=function(x1,x2){
x1^2+x2^2
}
y=outer(x1,x2,FUN=f)
contour(x1,x2,y)
plot(y^2+x^2+x*y)
plot(y^2+x^2+x*y)
x1=seq(-3,3,length=50)
x2=seq(-4,4,length=60)
f=function(x1,x2){
x1^2+x2^2
}
y=outer(x1,x2,FUN=f)#외적
persp(x1,x2,y)
y=outer(x1,x2,FUN=f)#외적
persp(x1,x2,y)
x1^2+x2
f=function(x1,x2){
x1^2+x2
}
y=outer(x1,x2,FUN=f)#외적
persp(x1,x2,y)
y=outer(x1,x2,FUN="+")
persp(x1,x2,y)
h1=c(4,12,10,6)
library(graphics)
x=c(100,50,10,17)
company=c("A회사","B회사","C회사","D회사")
pie(x,label=company)
pie(x,label=company,init.angle=90,main="s그룹의 자회사별 배출")
pie(x,label=company,init.angle=90,main="s그룹의 자회사별 매출액")
p=round((x/sum(x))*100)
company=paste(company,'%')
pie(x,label=company,init.angle=90,main="s그룹의 자회사별 매출액",col=rainbow(length(x)))
company
company=paste(company,p)
company=paste(company,'%')
pie(x,label=company,init.angle=90,main="s그룹의 자회사별 매출액",col=rainbow(length(x)))
library(graphics)
x=c(100,50,10,17)
company=c("A회사","B회사","C회사","D회사")
pie(x,label=company,init.angle=90,main="s그룹의 자회사별 매출액")
p=round((x/sum(x))*100)#백분율
company=paste(company,p)
company=paste(company,'%')
pie(x,label=company,init.angle=90,main="s그룹의 자회사별 매출액",col=rainbow(length(x)))
pie(rep(1,12),labels = seq(1,12),col=rainbow(12))
pie(rep(1,12),labels = seq(1,12),col=heat.colors(12)
pie(rep(1,12),labels = seq(1,12),col=rainbow(12))
pie(rep(1,12),labels = seq(1,12),col=heat.colors(12))
pie(rep(1,12),labels = seq(1,12),col=terrain.colors(12))
pie(rep(1,12),labels = seq(1,12),col=cm.colors(12))
pie(rep(1,12),labels = seq(1,12),col=topo.colors(12))
pie(rep(1,12),labels = seq(1,12),col=cm.colors(12),radius = 1)
pie(rep(1,12),labels = seq(1,12),col=topo.colors(12))
pie(rep(1,12),labels = seq(1,12),col=cm.colors(12),radius = 1)
pie(rep(1,12),labels = seq(1,12),col=cm.colors(12),radius = 0.5)
pie(rep(1,12),labels = seq(1,12),col=topo.colors(12))
pie(rep(1,12),labels = seq(1,12),col=cm.colors(12),radius = 0.8)
pie(rep(1,12),labels = seq(1,12),col=topo.colors(12))
a=qplot(Sepal.Length,Petal.Length,data=iris)#분석 용 회귀 분석 라인 추가
a
a
data(iris)
a
a
a
a
xxx<-matrix(c(1,2,3,4,5,6),2,3)
barplot(xxx,beside=T,names=c("Korea","America","Europe"))
barplot(abc,main="Base Ball 판매량",xlab="Season",ylab="판매량",names.arg=c("A","B","C","D","E"),border="blue",density=c(10,30,50,30,10))
abc=c(110,300,150,280,310)
barplot(abc,main="Base Ball 판매량",xlab="Season",ylab="판매량",names.arg=c("A","B","C","D","E"),border="blue",density=c(10,30,50,30,10))
barplot(xxx,beside=T,names.arg=c("Korea","America","Europe"))
barplot(xxx,beside=T,names=c("Korea","America","Europe"))
barplot(abc,main="Base Ball 판매량",xlab="Season",ylab="판매량",names=c("A","B","C","D","E"),border="blue",density=c(10,30,50,30,10))
a=qplot(Sepal.Length,Petal.Length,data=iris)#분석 용 회귀 분석 라인 추가
a
a+ theme_bw()
a+geom_abline(intercept = -4,slope=1) #절편 0, 기울기 1/y=a+bx
a+ theme_bw()
grid()
panel_grid()
a+ theme_bw()
a=qplot(Sepal.Length,Petal.Length,data=iris)#분석 용 회귀 분석 라인 추가
a
a+ theme_bw()
grid(10,10)
qplot(Sepal.Length,Petal.Length,data=iris,theme(panel.grid.major = element_line(colour = "grey40"),
panel.grid.minor = element_line(colour = "grey40")))
qplot(Sepal.Length,Petal.Length,data=iris,geom="line",color=Species)
p <- ggplot(mpg, aes(displ, cty)) + geom_point()
p
qplot(mtcars$wt, mtcars$mpg)
install.packages("treemap")
library(treemap)
gnipc=read.csv("GNIPC.csv",fileEncoding = "UTF-8")
gnipc=read.csv("GNIPC.csv",fileEncoding = "UTF-8",header=T)
df=dataa.frame(gnipc)
df=data.frame(gnipc)
df$GNIPC=as.numeric(df$GNIPC)
map=get_googlemap(center=cen,scale=1,maptype="roadmap",zoom=3,marker=df2)
str(gnipc)
str(df)
df=gnipc
treemap(df,index=c("Economy","code"),vSize = "GNIPC",vColor = "GNIPC",type="value")
treemap(df,index=c("Economy","code"),vSize = "GNIPC",type="index")
library(ggplot2)
library(ggmap)
install.packages("Seoul")
install.packages('googleway')
library(googleway)
gc1=geocode('seoul')
gc1
gc2=geocode(enc2utf8("서울"))
gc2
cen1=as.numeric(gc1)
cen1
map1_1=get_googlemap(center=cen1,language="ko-KR",scale=1,color="bw")
ggmap(map1_1,fullpage=T)
map1_2=get_googlemap(center=cen1,scale=1,zoom=7,source='osm')
ggmap(map1_2,fullpage=T)
map1_3=get_googlemap(center=cen1,scale=2,zoom=10,maptype='roadmap')
ggmap(map1_3,fullpage=T)
map1_4=get_googlemap(center=cen1,scale=2,zoom=18,maptype='hybrid')
ggmap(map1_4,fullpage=T)
map1_5=get_googlemap(center=cen1,scale=2,zoom=18,maptype='satellite')
ggmap(map1_5,fullpage=T)
ggmap(map1_4,fullpage=T)
ggmap(map1_6,extent='panel')
map1_6=get_googlemap(center=cen1,scale=2,zoom=19,maptype='satellite')
ggmap(map1_6,extent='panel')
ggmap(map1_6,extent='device')
ggmap(map1_6,extent='normal')
map2=get_map(location='seoul',zoom=14,maptype='watercolor',scale=1)
ggmap(map2,fullpage=T)
gc3=geocode(enc2utf8('강원도 속초시'))
gc3
cen3=as.numeric(gc3)
cen3
map3=get_googlemap(center=cen3,maptype='roadmap',marker=gc3)
ggmap(map3,extent='device')
sk=c('서울','광주')
gc4=geocode(enc2utf8(sk))
cen4=c(mean(gc4$lon),mean(gc4$lat))
map4=get_googlemap(center=cen4,maptype='roadmap',zoom=9,marker=gc4)
ggmap(map4,extent='device')
names=c('1.망상해수욕장','2.속초해수욕장','3.낙산해수욕장','4.송지호해수욕장','5.하조대해수욕장')
addr=c('강원도 동해시 망상동 393-16','강원도 속초시 조양동 1464-11','강원도 양양군 강현면 주청리 1','강원도 고성군 죽왕면 8','강원도 양양군 현북면 하광정리 1')
gc5=geocode(enc2utf8(addr))
df5=data.frame(name=names,lon=gc5$lon,lat=gc5$lat)
cen5=c(mean(df5$lon),mean(df5$lat))
map5=get_googlemap(center=cen5,maptype='roadmap',zoom=9,marker=gc5)
(gmap5=ggmap(map5,extent='device'))
gmap5+geom_text(data=df5,aes(x=lon,y=lat),label=df5$name,size=3,hjust=-.2,vjust=-1)
gmap5+geom_text(data=df5,aes(x=lon,y=lat),label=df5$name,size=3,hjust=-1,vjust=1)
df6=read.csv('시각화/kang.csv',header=T)
df6=read.csv('kang.csv',header=T)
df6=read.csv('kang.csv',header=T)
df6$address=as.character(df1$address)
data()
data("GNI2014")
GNI2014
treemap(GNI2014,index=c("continent","iso3"),vSize="population",vColor = "GNI",type="value")
treemap(GNI2014,index=c("continent","iso3"),vSize="population",type="index")
df6$address=as.character(df6$address)
cen6=c(mean(df6$longitude),mean(df6$latitude))
map6_1=get_googlemap(center=cen6,maptype='roadmap',zoom=9)
ggmap(map6_1)+geom_text(data=df6,aes(x=df6$longitude,y=df6$latitude),size=3,label=df6$names)
ggmap(map6_1,extent='devide')+geom_point(aes(x=df6$longitude,y=df6$latitude,color='red',size=5),data=df6,shape=15)
map6_2=get_googlemap(center=cen6,maptype='roadmap',zoom=9)
(gmap6_2=ggmap(map6_2,fullpage=T,legend='topright'))
gmap5_1+geom_text(data=df5,aes(x=lon,y=lat,color=factor(name)),size=10,label=seq_along(df5$name))
gmap6_2+geom_text(data=df6,aes(x=df6$longitude,y=df6$latitude,color=factor(df6$names)),size=8,label=seq_along(df6$names))
data(mtcars)
p=ggplot(mtcars,aes(x=wt,y=mpg,label=rownames(mtcars)))
(p1=p+geom_text(angle=30,size=2,hjust=-.2,vjust=0))
(p2=p+geom_text(angle=70,size=2,hjust=-.2,vjust=0.5))
p1+geom_point(aes(color=cyl))
p2+geom_point(aes(color=cyl))
u=read.csv('시각화/university.csv',header=T)
u=read.csv('university.csv',header=T)
kor=get_map('seoul',zoom=11,maptype='watercolor')
(gmap_u1=ggmap(kor,fullpage=T)+geom_point(data=u,aes(x=LON,y=LAT,color=factor(학교명)),size=3))
(gmap_u2=ggmap(kor,fullpage=T)+geom_text(data=u,aes(x=LON+.01,y=LAT+.01,label=학교명),size=2.5))
gmap_u1+geom_text(data=u,aes(x=LON+.01,y=LAT+.01,label=학교명),size=2.5)
ggsave('gmap.png')
(gmap_u1=ggmap(kor,fullpage=T)+geom_point(data=u,aes(x=LON,y=LAT,color=factor(학교명)),size=3))
(gmap_u2=ggmap(kor,fullpage=T)+geom_text(data=u,aes(x=LON+.01,y=LAT+.01,label=학교명),size=2.5))
gmap_u1+geom_text(data=u,aes(x=LON+.01,y=LAT+.01,label=학교명),size=2.5)
university.csv
pop=read.csv('시각화/population.csv',header=T)
pop=read.csv('population.csv',header=T)
region=pop$지역명; lon=pop$LON; lat=pop$LAT; house=pop$세대수
df_pop=data.frame(region,lon,lat,house)
map_pop=get_map(enc2utf8('대구'),zoom=7,maptype='roadmap')
(gmap_pop=ggmap(map_pop,fullpage=T))
gmap_pop+geom_point(data=df_pop,aes(x=lon,y=lat,color=house,size=house))
ggsave('pop.png')
df_q=head(quakes,100)
cen_q=c(mean(df_q$lon),mean(df_q$lat))
df_q=data.frame(lon=df_q$long,lat=df_q$lat)
df_q$lon=ifelse(df_q$lon>180,-(360-df_q$lon),df_q$lon)
map_q1=get_googlemap(center=cen_q,scale=1,maptype='roadmap',zoom=3,marker=df_q)
map_q2=get_googlemap(center=cen_q,scale=1,maptype='roadmap',zoom=5,marker=df_q)
ggmap(map_q1,extent='device')
ggmap(map_q2,fullpage=T)+geom_point(data=df_q,aes(x=lon,y=lat,size=mag),alpha=.5) # 오류
treemap(GNI2014,index=c("continent","iso3"),vSize="population",vColor = "GNI",type="value")
data(buisness)
data(business)
treemap(business,index=c("NACE1","NACE2","NACE3"),vSize = "turnover",type = "index")
write.csv(business,"business.csv")
treemap(business[business$NACE1=="F - Construction",],index = c("NACE2","NACE3"),vSize = "employees",type = "index")
treemap(business[business$NACE1=="F - Construction",],index = c("NACE2","NACE3"),vSize = "employees",type = "value")
# 참조 2 트위터 키워드 크롤링
#####################################################################################
# 크롤링 기법1 웹페이지 자체에서 긁어 오는 것 / 기법 2 sns 에서 긁어 오기
# 기법 1
# httr 통신, 프로토콜 과 관련 된 패키지 / rvest 컨트롤 크롤링과 관련된 패키지
install.packages('rvest')
install.packages('httr')
install.packages('reticulate')
library(httr)
library(rvest)
library(reticulate)
SearchKeyword=function(keyword,num){
#url1="https://mobile.twitter.com/search?q=%EC%84%9C%EC%9A%B8%EC%8B%9C&s=typd&next_cursor=TWEET-"
url1="https://mobile.twitter.com/search?q="
url2="&s=typd&next_cursor=TWEET-"
url3="53938602484480-895531812385988610"
b=enc2utf8(keyword)
c=URLencode(b)
#850
text6 = data.frame()
for (i in 1:num) {
url4 = paste(url1, c, url2, i ,url3, sep='')
text1 = GET(url4)
text2 = read_html(text1)
text3 = html_nodes(text2, xpath = "//*[@class='tweet-text']")
text4 = html_text(text3)
for (n in 1:length(text4)) {
text5 = cbind(n, text4[n])
text6 = rbind(text6,text5)
}
}
data2=data.frame(text6[,2])
data3= unique(data2)
write1= paste(keyword,'.csv')
write.csv(data3,write1)
}
View(text6)
SearchKeyword('경기도 교통 수원',400)
for (n in 1:length(text4)) {
text5 = cbind(n, text4[n])
text6 = rbind(text6,text5)
}
# 참조 2 트위터 키워드 크롤링
#####################################################################################
# 크롤링 기법1 웹페이지 자체에서 긁어 오는 것 / 기법 2 sns 에서 긁어 오기
# 기법 1
# httr 통신, 프로토콜 과 관련 된 패키지 / rvest 컨트롤 크롤링과 관련된 패키지
#install.packages('rvest')
#install.packages('httr')
#install.packages('reticulate')
library(httr)
library(rvest)
library(reticulate)
SearchKeyword=function(keyword,num){
#url1="https://mobile.twitter.com/search?q=%EC%84%9C%EC%9A%B8%EC%8B%9C&s=typd&next_cursor=TWEET-"
url1="https://mobile.twitter.com/search?q="
url2="&s=typd&next_cursor=TWEET-"
url3="53938602484480-895531812385988610"
b=enc2utf8(keyword)
c=URLencode(b)
#850
text6 = data.frame()
for (i in 1:num) {
url4 = paste(url1, c, url2, i ,url3, sep='')
text1 = GET(url4)
text2 = read_html(text1)
text3 = html_nodes(text2, xpath = "//*[@class='tweet-text']")
text4 = html_text(text3)
for (n in 1:length(text4)) {
text5 = cbind(n, text4[n])
text6 = rbind(text6,text5)
}
}
data2=data.frame(text6[,2])
data3= unique(data2)
write1= paste(keyword,'.csv')
write.csv(data3,write1)
}
SearchKeyword('경기도 교통 수원',400)
py_run_file("C:\Users/dnghw/WebstormProjects/bigdata_pro2/assets/py/LR_final2.py")
main=py_run_file("경기도 교통 수원.csv',encoding='cp949',header=None)")
x+y
x=c(1,2,3)
y=c(2,x,3)
x+y
rm(list=ls())
x=c(1:100)
y=rand(x,10)
library(stats)
y=rand(x,10)
y=rnorm(1,100,10)
y=rnorm(10,50,10)
plot(y)
plot(x,y)
head(iris)
xy=rbinde(c(1,2,3,),c(4,5,6))
xy=rbind(c(1,2,3,),c(4,5,6))
xy=rbind(c(1,2,3),c(4,5,6))
xy
xy=cbind(c(1,2,3),c(4,5,6))
xy
xyz=data.frame(c(1,2),c("fruit","animal"))
xyz
xyz=data.frame(num=c(1,2),name=c("fruit","animal"))
xyz
cor(x,y)
x=c(1:100)
y=rnorm(100,50,10)
cor(x,y)
barplot(x)
barplot(y)
y1=sample(1:100, replace=T)
y1=sample(1:100,5, replace=T)
cor(x,y1)
x1=sample(1:100,20)
y1=sample(1:100,20, replace=T)
cor(x1,y1)
plot(x1,y1)
librarya(sampling)
library(sampling)
data1=data(iris)
data1
(data1)
rm(list=ls())
install.packages(c("dplyr","hflights"))
library(dplyr)
library(hflights)
dim(hflights)
hflights_df=tbl_df(hflights)
hflights_df
filter(hflights_df,Month ==1, DayofMonth ==1)
arrange(hflights_df,ArrDelay,Month,Year)
arrange(hflights_df,desc(Month))
select(hflights_df,Year, Month, DayOfWeek)
select(hflights_df,Year:DayOfWeek)
select(hflights_df,-(Year:DayOfWeek))
mutate(hflights_df,gain=ArrDelay-DepDelay, gain_per_hour=gain/(AirTime/60))
summarise(hflights_df,delay=mean(DepDelay,na.rm=TRUE))
delay<-summarise(planes,count=n(),dist=mean(Distance, na.rm=TRUE,delay=mean(ArrDelay,na.rm=TRUE)))
planes=group_by(hflights_df,TailNum)
delay<-summarise(planes,count=n(),dist=mean(Distance, na.rm=TRUE,delay=mean(ArrDelay,na.rm=TRUE)))
delay=filter(delay,count>20,dist<200)
library(ggplot2)
ggplot(delay, aes(dist,delay))+geom_point(aes(size=count),alpha=1/2)+geom_smooth()+scale_size_area()
ggplot(delay, aes(dist,delay))+geom_point(aes(size=count),alpha=1/2)+geom_smooth()+scale_size_area()
planes=group_by(hflights_df,TailNum)
delay<-summarise(planes,count=n(),dist=mean(Distance, na.rm=TRUE,delay=mean(ArrDelay,na.rm=TRUE)))
delay=filter(delay,count>20,dist<200)
library(ggplot2)
ggplot(delay, aes(dist,delay))+geom_point(aes(size=count),alpha=1/2)+geom_smooth()+scale_size_area()
a <= data.frame(1,3);
a <- data.frame(1,3);
a
a$X1=2;
a
n=c(4,5,7);
a <- data.frame(n)
a
for i in (1:nrow(a)-1){
print(a[i+1,1]-a[i,1])
}
for i in (1:nrow(a)-1){
print(a[i+1,1]-a[i,1])
};
for (i in 1:nrow(a)-1){
print(a[i+1,1]-a[i,1])
};
n=c(4,5,7,12,5,6,7,8,9,2,,23);
for (i in 1:nrow(a)-1){
print(a[i+1,1]-a[i,1])
};
a <- data.frame(n)
for (i in 1:nrow(a)-1){
print(a[i+1,1]-a[i,1])
};
n=c(4,5,7,12,5,6,7,8,9,2,,23);
n=c(4,5,7,12,5,6,7,8,9,2,,23);
a <- data.frame(n)
n=c(4,5,7,12,5,6,7,8,9,2,4,23);
a <- data.frame(n)
for (i in 1:nrow(a)-1){
print(a[i+1,1]-a[i,1])
};
View(a)
library(httr)
library(rvest)
name<-c("ykiho","yadmnm","clcd","clcdnm","sidocd","sidocdnm","sggucd","sggucdnm","emdongnm" ,"postno","addr","telno","hospurl","estbdd", "drtotcnt","gdrcnt","intncnt","resdntcnt" ,"sdrcnt" ,"xpos" ,"ypos" ,"distance")
df<-rbind(name)
url<-"http://apis.data.go.kr/B551182/hospInfoService/getHospBasisList?numOfRows=1000&ServiceKey=BVnt6h5rMtX52Vuu5ckoGKesnewYmnOTSYLd6GaQ4vjGnBMCgCG%2FEoMuP5StXjfQQZmrLeNU1luHjqbDDbu4cg%3D%3D&pageNo="
for (j in 1:100){
pn<-j urlf<-paste0(url,pn)
#final url html<-read_html(urlf)# html doc nodes<-html_nodes(html,"item")
for (i in 1:1000){
print(i) hospital<-c()
for (j in 1:length(name)){
hp<-nodes[i] %>% html_node(name[j]) %>% html_text()
if (is.na(hp)){
hp="empty"
}
hospital<-c(hospital,hp)
}
df<-rbind(df,hospital)
}
if (length(nodes)<1000){
break;
}
}
library(httr)
library(rvest)
name<-c("ykiho","yadmnm","clcd","clcdnm","sidocd","sidocdnm","sggucd","sggucdnm","emdongnm" ,"postno","addr","telno","hospurl","estbdd", "drtotcnt","gdrcnt","intncnt","resdntcnt" ,"sdrcnt" ,"xpos" ,"ypos" ,"distance")
df<-rbind(name)
url<-"http://apis.data.go.kr/B551182/hospInfoService/getHospBasisList?numOfRows=1000&ServiceKey=BVnt6h5rMtX52Vuu5ckoGKesnewYmnOTSYLd6GaQ4vjGnBMCgCG%2FEoMuP5StXjfQQZmrLeNU1luHjqbDDbu4cg%3D%3D&pageNo="
for (j in 1:100){
pn<-j urlf<-paste0(url,pn)
#final url html<-read_html(urlf)# html doc nodes<-html_nodes(html,"item")
for (i in 1:1000){
print(i) hospital<-c()
for (j in 1:length(name)){
hp<-nodes[i] %>% html_node(name[j]) %>% html_text()
if (is.na(hp)){
hp="empty"
}
hospital<-c(hospital,hp)
}
df<-rbind(df,hospital)
}
if (length(nodes)<1000){
break;
}
}
