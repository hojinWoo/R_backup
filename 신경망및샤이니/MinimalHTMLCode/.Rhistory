sum(diag(t1))/sum(t1)
sum(diag(t2))/sum(t2)
install.packages("readbitmap")
library(readbitmap)
img7=read.bitmap('img7.bmp')
img7
image(img7)
img7=read.bitmap('img7.bmp')
image(img7)
str(img7)
img7=read.bitmap('img7.bmp',channel=2)
str(img7)
image(img7)
img=image(img7)
test5=img
predict(t1,newdata=test5)
predict(r2,newdata=test5)
View(r2)
test5=img[,1]
str(test5)
img=image(img7)
View(img)
str(img7)
img=image(img7)
View(img)
Vuew(img7)
View(img7)
test5=ncol(img)
str(test5)
test5=ncol(img7)
str(test5)
View(img7)
View(test5)
train=read.csv('https://github.com/ozt-ca/tjo.hatenablog.samples/raw/master/r_samples/public_lib/jp/mnist_reproduced/short_prac_train.csv')
test=read.csv('https://github.com/ozt-ca/tjo.hatenablog.samples/raw/master/r_samples/public_lib/jp/mnist_reproduced/short_prac_test.csv')
im1=as.matrix(train[1,-1])
str(im1)
im1=as.matrix(train[1,-1])
str(im1)
m1=matrix(im1,nrow=28,byrow=T)#행이 28개가 되도록
str(m1)
image(m1)
install.packages("rvest")
install.packages("httr")
library(rvest)
library(httr) #크롤링 기법
text=GET(url="http://terms.naver.com/entry.nhn?docId=1691554&cid=42171&categoryId=42183")
text1=GET(url="http://terms.naver.com/entry.nhn?docId=1691554&cid=42171&categoryId=42183")
text2=html_text(text1)
text2=read_html(text1)
html_text(text2)#안에 있는 tag들도 삭제
text2
text1
text3=html_nodes(text2,"div.info_tmp_wrap")#한 항목만 가져오려면 node, 여러개 가져오려면 nodes
text3
text4=html_text(text3)
text4
text5=html_nodes(text2,"div.tlp_ly_dic")
text6=html_text(text5)
text6
text5=html_nodes(text2,"div.t1p_ly_dic")
text6=html_text(text5)
text6
text5=html_nodes(text2,"div.tlp_notice")
text6=html_text(text5)
text6
text5=html_nodes(text2,"tlp_notice")
text6=html_text(text5)
text6
text5=html_nodes(text2,"div.tlp_notice")
text6=html_text(text5)
text6
text5=html_nodes(text1,"div.tlp_notice")
text5=html_nodes(text2,"div.tlp_notice")
text5=html_nodes(text2,"div.h3")
text6=html_text(text5)
text5=html_nodes(text2,"h3")
text6=html_text(text5)
text6
print(url1)
url="https://search.naver.com/search.naver?ie=utf8&where=news&query=%EA%B2%BD%EA%B8%B0%EB%8F%84%20%EB%B9%85%ED%8C%8C%EC%9D%B4&sm=tab_pge&sort=0&photo=0&field=0&reporter_article=&pd=0&ds=&de=&docid=&nso=so:r,p:all,a:all&mynews=0$cluster_rank=60%start="
for(i in seq(1,449,10)){
url1=paste(url,i,"&refresh_start=0") #한 문장이 되도록 결합
print(url1)
}
tot=c(tot,Text4)
tot=c()
for(i in seq(1,449,10)){
url1=paste(url,i,"&refresh_start=0") #한 문장이 되도록 결합
#print(url1)
Text1=GET(url1)
Text2=read_html(Text1)
Text3=html_nodes(Text2,"h3")
Text4=html_text(Text3)#vector로 추출
tot=c(tot,Text4)
}
tot
@import strinr
import(stringr)
backports::import(stringr)
library(backports)
import(stringr)
library(rvest)
library(rvest)
library(httr) #크롤링 기법
library(rvest)
library(httr) #크롤링 기법
import(stringr)
stringr::boundary(x)
library(ggplot2)
data=read.csv('svm.csv',header=T)
names(data)=c('X','Y')
plot(data,pch=16)
model1=svx(Y~X,data)
model2=svm(x=data$X,y=data$Y)
model1=svm(Y~X,data)
library("stringr", lib.loc="~/R/win-library/3.4")
install.packages('tm')
library(tm)
data=read.csv('svm.csv',header=T)
model1=svm(Y~X,data)
install.packages('e1071')
model1=svm(Y~X,data)
library(e1071)
model1=svm(Y~X,data)
names(data)=c('X','Y')
model1=svm(Y~X,data)
model2=svm(x=data$X,y=data$Y)
pred1=predict(model1,data)
pred1
rmse=function(error){
sqrt(mean(error^2))
}
rmse(data$y-models$fitted)
rmse(data$y-model1$fitted)
points(data$X,model1$fitted,col="red",pch='+')
model1_1=svm(Y~X,data,kernel='linear')
points(data$X,model1_1$fitted,col="blue",pch='*')
model0=lm(Y~X,data)
abline(model0)
rmse(data$y-model1$fitted)
model1$fitted
data$y
rmse(data$Y-model1$fitted)
tuneResult <- tune(svm, Y ~ X,  data = data,
ranges = list(epsilon = seq(0,1,0.1), cost = 2^(2:9))
)
print(tuneResult)
plot(tuneResult)
2^(2:9)
tuneResult$best.model#최적화 된 모
tuneResult1 <- tune(svm, Y ~ X,  data = data,
ranges = list(epsilon = seq(0,0.2,0.01), cost = 2^(2:9))
)
print(tuneResult1)
plot(tuneResult1)
pred2=predict(tuneResult$best.model,newdata=data)
points(data$X,model1$fitted,pch='*',col='blue')
points(data$X,pred2,pch='+',col='pink')
plot(data,pch='/')
points(data$X,model1$fitted,pch='*',col='blue')
points(data$X,pred2,pch='+',col='pink')
seq(1,500,2)
d1=data.frame()
(500/6)
data1=seq(1,500,2)
d1[i,i:i+5]=data1[i:i+5]
for(i in 1:(500/6)){
d1[i,i:i+5]=data1[i:i+5]
}
d1=data.frame()
for(i in 1:(500/6)){
d1[i,i:i+5]=data1[i:i+5]
}
d1=array(dim=c((500/6),6))
for(i in 1:(500/6)){
d1[i,i:i+5]=data1[i:i+5]
}#각각의 dimension을 맞춰줘야 함
d1[i,i:(i+5)]=data1[i:(i+5)]
for(i in 1:(500/6)){
d1[i,i:(i+5)]=data1[i:(i+5)]
}#각각의 dimension을 맞춰줘야 함
d1=array(dim=c((500/6),6))
for(i in 1:(500/6)){
d1[i,i:(i+5)]=data1[i:(i+5)]
}#각각의 dimension을 맞춰줘야 함
d1[i,(i:(i+5))]=data1[i:(i+5)]
for(i in 1:(500/6)){
d1[i,(i:(i+5))]=data1[i:(i+5)]
}#각각의 dimension을 맞춰줘야 함
data1[i:(i+5)]
1:(500/6)
d1[i,]=data1[i:(i+5)]
for(i in 1:(500/6)){
d1[i,]=data1[i:(i+5)]
}#각각의 dimension을 맞춰줘야 함
d1
x=d1[,1:5]
y=d1[,6]
x
y
model3=svm(x=x,y=y)
model3=svm(x=x[1:60],y=y[1:60])
model3=svm(x=x[1:60],y=y[1:60])
predict(model3,newdata=x[61:83,])
model3=svm(x=x[1:60,],y=y[1:60])
predict(model3,newdata=x[61:83,])
pred2=predict(model3,newdata=x[61:83,])
cbind(y[61:83],pred2)
model4=svm(x=x[1:60,],y=y[1:60],kernel = 'linear')
model4=svm(x=x[1:60,],y=y[1:60],kernel = 'linear')
pred3=predict(model4,newdata=x[61:83,])
cbind(y[61:83],pred3)
library(rpart)
library(mlbench)
data(Ozone)
Ozone
View(Ozone)
data("Ozone")
star(ozone)
str(ozone)
str(Ozone)
O2=na.omit(Ozone)
str(Ozone)#factor변수들을 데이터 형으로 변경할 필요가 있음
O2=na.omit(Ozone)
str(O2)
View(Ozone)
str(Ozone)#factor변수들을 데이터 형으로 변경할 필요가 있음
O2$V1=as.numeric(O2$V1)
O2$V2=as.numeric(O2$V2)
O2$V3=as.numeric(O2$V3)
str(O2)
nn=nrow(O2)
nn
train=O2[1:(nn*0.7),]
test=O2[-(1:(nn*0.7)),]
svm_model=svm(V4~.,train,cost=1000,gamma=1e-04)#cost,gamma default는 1
svm_pred=predict(svm_mode1,test[-3])
svm_model=svm(V4~.,train,cost=1000,gamma=1e-04)#cost,gamma default는 1
svm_pred=predict(svm_mode1,test[-3])
svm_pred=predict(svm_model,test[-3])
svm_pred=predict(svm_model,test[-4])
svm_model
rmse(train$V4-model4$fitted)
rmse(train$V4-model4$fitted)
rmse(train$V4-svm_model$fitted)
cbind(test$V4,svm_pred)
rmse(test$V4-svm_pred)
svm_model=svm(V4~.,train,cost=100,gamma=1e-04)#cost,gamma default는 1
rmse(train$V4-svm_model$fitted)
svm_pred=predict(svm_model,test[-4])
cbind(test$V4,svm_pred)
rmse(test$V4-svm_pred)
data01=read.csv('data_weather.csv',header=T)
View(data01)
data01=na.omit(data01)
View(data01)
data01=read.csv('data_weather.csv',header=T)
data02=na.omit(data01)
data03=matrix(data02,nrow = 1,byrow=F)#열방향으로 차례대로 들어가
str(data03)
data03=matrix(as.matrix(data02,nrow = 1,byrow=F))#열방향으로 차례대로 들어가
str(data03)
dim(data02)
dim(data03)
length(data03)
nn1=length(data03)
dd1=array(dim=c((nn1/6)),6)
(nn1/6)
dd1[i,]=data03[i:i+5]
for(i in 1:(nn1/6)){
dd1[i,]=data03[i:i+5]
}
for(i in 1:(nn1/6)){
dd1[i,]=data03[i:(i+5)]
}
data03=matrix(as.matrix(data02,nrow = 1,byrow=F))#열방향으로 차례대로 들어가
nn1=length(data03)
dd1=array(dim=c((nn1/6)),6)
for(i in 1:(nn1/6)){
dd1[i,]=data03[i:(i+5)]
}
for(i in 1:(nn1/6)){
dd1[i,]=data03[i:(i+5)]
}
dd1=array(dim=c((nn1/6)),6)
dd1
for(i in 1:(nn1/6)){
dd1[i,]=data03[i:(i+5)]
}
dd1=array(dim=c((nn1/6),6))
for(i in 1:(nn1/6)){
dd1[i,]=data03[i:(i+5)]
}
colnames(dd1)=c('V1','V2','V3','V4','V5','Y)
colnames(dd1)=c('V1','V2','V3','V4','V5','Y')
colnames(dd1)=c('V1','V2','V3','V4','V5','Y')
head(dd1)
View(dd1)
svm_data1=svm(Y~.,dd1,cost=100,gamma=0.1)
plot(data03)
plot(1:length(data03),data03)
plot(data03)
plot(1:length(data03),data03)
svm_pred1=predict(svm_data1)
svm_pred1
dd1=array(dim=c((nn1-6),6))
for(i in 1:(nn1/6)){
dd1[i,]=data03[i:(i+5)]
}
colnames(dd1)=c('V1','V2','V3','V4','V5','Y')
head(dd1)
View(dd1)
plot(1:length(data03),data03)
svm_data1=svm(Y~.,dd1,cost=100,gamma=0.1)
svm_data1
model5-svm(x=dd1[,1:5],y=dd1[,6])
model5=svm(x=dd1[,1:5],y=dd1[,6])
sample(1:nrow(dd1),10)
ind=sample(1:nrow(dd1),10,replace=F)
pred6=predict(model5,newdata=dd1[ind,1:5])
cbind(dd1[ind,6],pred6)
pred6
dd1[ind,1:5]
View(dd1)
model5=svm(x=dd1[,1:5],y=dd1[,6])
ind=sample(1:nrow(dd1),10,replace=F)
pred6=predict(model5,newdata=dd1[ind,1:5])
cbind(dd1[ind,6],pred6)
dd1=na.omit(dd1)
plot(1:length(data03),data03)
svm_data1=svm(Y~.,dd1,cost=100,gamma=0.1)
model5=svm(x=dd1[,1:5],y=dd1[,6])
ind=sample(1:nrow(dd1),10,replace=F)
pred6=predict(model5,newdata=dd1[ind,1:5])
cbind(dd1[ind,6],pred6)
View(dd1)
cbind(dd1[ind,6],pred6)
dd1=array(dim=c((nn1-6),6))
head(dd1)
nn1=length(data03)
nn1
dd1=array(dim=c((nn1-6),6))
dd1
for(i in 1:(nn1/6)){
dd1[i,]=data03[i:(i+5)]
}
colnames(dd1)=c('V1','V2','V3','V4','V5','Y')
head(dd1)
View(dd1)
library(nnet)
for(i in 1:(nn1)){
dd1[i,]=data03[i:(i+5)]
}
for(i in 1:nn1){
dd1[i,]=data03[i:(i+5)]
}
dd1=array(dim=c((nn1-6),6))
dd1
for(i in 1:(nn1-6)){
dd1[i,]=data03[i:(i+5)]
}
colnames(dd1)=c('V1','V2','V3','V4','V5','Y')
head(dd1)
View(dd1)
svm_data1=svm(Y~.,dd1,cost=100,gamma=0.1)
model5=svm(x=dd1[,1:5],y=dd1[,6])
ind=sample(1:nrow(dd1),10,replace=F)
pred6=predict(model5,newdata=dd1[ind,1:5])
cbind(dd1[ind,6],pred6)
library(nnet)
model6=nnet(x=dd1[,1:5],y=dd1[,6],size=2,lineout=T)
model6=nnet(x=dd1[,1:5],y=dd1[,6],size=2,lineout=T)
model6
model6$wts #각각에 대한 weight
model6$fitted.values #예측
model6=nnet(x=dd1[,1:5],y=dd1[,6],size=2,lineout=T)
model6$wts #각각에 대한 weight
model6$fitted.values #예측
model6$fitted.values #예측
targets=class.ind(c(rep("s",50),rep("c",50),rep("v",50)))
samp <- c(sample(1:50,25), sample(51:100,25), sample(101:150,25))
samp
ir1 <- nnet(ir[samp,], targets[samp,], size = 2, rang = 0.1,
decay = 5e-4, maxit = 200)
ir <- rbind(iris3[,,1],iris3[,,2],iris3[,,3])
ir1 <- nnet(ir[samp,], targets[samp,], size = 2, rang = 0.1,
decay = 5e-4, maxit = 200)
ir <- rbind(iris3[,,1],iris3[,,2],iris3[,,3])
targets=class.ind(c(rep("s",50),rep("c",50),rep("v",50)))
samp <- c(sample(1:50,25), sample(51:100,25), sample(101:150,25))
ir1 <- nnet(ir[samp,], targets[samp,], size = 2, rang = 0.1,
decay = 5e-4, maxit = 200)
targets
ir1$fitted.values
test.cl <- function(true, pred) {
true <- max.col(true)
cres <- max.col(pred)
table(true, cres)
}
test.cl(targets[-samp,], predict(ir1, ir[-samp,]))
install.packages("neuralnet")
library("neuralnet", lib.loc="~/R/win-library/3.4")
library(neuralnet)
install.packages("shiny")
library(shiny)
library(nnet)
library(stats)
MSE <- c()
for(i in 1:20){
x1<-runif(50,0,1)
x2<-rnorm(50,0,1)
x3<-3*runif(50,0,1)^(1/3)
e<-rnorm(50,0,0.2)
y<-5*(4.5-64*x1^2*(1-x1)^2-16*(x1-0.5)^2)+4*exp(x2/2)+7*sin(pi*x3/4)+e
dat<-data.frame(x1,x2,x3,y)
SSE<-c();
for(k in 1:30){
nn<-nnet(y~.,data=dat,size=k,decay=0.01,linout=T)
SSE[k]<-sum(nn$residuals^2)
}
best.size<-which.min(SSE)
nn<-nnet(y~.,data=dat,size=best.size,decay=0.01,linout=T)
MSE[i]<-sum(nn$residuals^2)/50
}
mean(MSE);sd(MSE)
install.packages("drat", repos="https://cran.rstudio.com")#default경로가 아님
drat:::addRepo("dmlc")
install.packages("mxnet")
library(mxnet)
install.packages("mxnet",repos="https://cran.rstudio.com")
cran <- getOption("repos")
cran["dmlc"] <- "https://s3-us-west-2.amazonaws.com/apache-mxnet/R/CRAN/"
options(repos = cran)
install.packages("mxnet")
library("mxnet", lib.loc="~/R/win-library/3.4")
data <- mx.symbol.Variable("data")
fc1 <- mx.symbol.FullyConnected(data, name="fc1", num_hidden=128)
act1 <- mx.symbol.Activation(fc1, name="relu1", act_type="relu")
fc2 <- mx.symbol.FullyConnected(act1, name="fc2", num_hidden=64)
act2 <- mx.symbol.Activation(fc2, name="relu2", act_type="relu")
fc3 <- mx.symbol.FullyConnected(act2, name="fc3", num_hidden=10)
softmax <- mx.symbol.SoftmaxOutput(fc3, name="sm")
devices <- mx.cpu()
mx.set.seed(0)
model <- mx.model.FeedForward.create(softmax, X=train.x, y=train.y,
ctx=devices, num.round=10, array.batch.size=100,
learning.rate=0.07, momentum=0.9,  eval.metric=mx.metric.accuracy,
initializer=mx.init.uniform(0.07),
epoch.end.callback=mx.callback.log.train.metric(100))
train<-read.csv('https://github.com/ozt-ca/tjo.hatenablog.samples/raw/master/r_samples/public_lib/jp/mnist_reproduced/short_prac_train.csv')
test<-read.csv('https://github.com/ozt-ca/tjo.hatenablog.samples/raw/master/r_samples/public_lib/jp/mnist_reproduced/short_prac_test.csv')
train <- data.matrix(train)
test <- data.matrix(test)
train.x <- train[,-1]
train.y <- train[,1]
train.x <- t(train.x/255)#trans필ㅇ
test_org <- test
test <- test[,-1]
test <- t(test/255)
table(train.y)
data <- mx.symbol.Variable("data")
fc1 <- mx.symbol.FullyConnected(data, name="fc1", num_hidden=128)
act1 <- mx.symbol.Activation(fc1, name="relu1", act_type="relu")
fc2 <- mx.symbol.FullyConnected(act1, name="fc2", num_hidden=64)
act2 <- mx.symbol.Activation(fc2, name="relu2", act_type="relu")
fc3 <- mx.symbol.FullyConnected(act2, name="fc3", num_hidden=10)
softmax <- mx.symbol.SoftmaxOutput(fc3, name="sm")#중요하
devices <- mx.cpu()
mx.set.seed(0)
model <- mx.model.FeedForward.create(softmax, X=train.x, y=train.y,
ctx=devices, num.round=10, array.batch.size=100,
learning.rate=0.07, momentum=0.9,  eval.metric=mx.metric.accuracy,
initializer=mx.init.uniform(0.07),
epoch.end.callback=mx.callback.log.train.metric(100))
preds <- predict(model, test)
dim(preds)
preds <- predict(model, test)
pred.label <- max.col(t(preds)) - 1
table(pred.label)
head(pred.label)
table(test_org[,1],pred.label)
sum(diag(table(test_org[,1],pred.label)))/1000
library(mlbench)
data("Vowel")
str(Vowel)
data1=Vowel
data1$Class=as.numeric(data1$Class)
svm(Class~.,data=data1[,-1])
svm(Class~.,data=data1[,-1],type='C-classification',kernel=sigmoid)
svm(Class~.,data=data1[,-1],type='C-classification',kernel='sigmoid')
model10=svm(Class~.,data=data1[,-1],type='C-classification',kernel='sigmoid')
model10$fitted
levels(Vowel$Class)
table(data1$Class,model10$fitted)
model11=svm(Class~.,data=Vowel)
table(data1$Class,model11$fitted)
t1=table(data1$Class,model10$fitted)
t2=table(data1$Class,model11$fitted)
sum(diag(t1))/sum(t1)
sum(diag(t2))/sum(t2)
library(shiny)
runExample("01_hello")
runExample("08_html")
runGist(6571951)
runGitHub("GoogleAnalytics", "ChrisBeeley")
runGitHub("GoogleAnalytics", "hojin")
runGitHub("GoogleAnalytics", "Hojin")
runGitHub("GoogleAnalytics", "hojinWoo")
runApp()
setwd("C:/r_exam/신경망및샤이니/MinimalHTMLCode")
runApp()
