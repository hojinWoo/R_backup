iris
summary(iris)
setwd("~/")
table(iris$Species)
x=table(iris$Species)
x
x1<-1
2>-x2
x1<-1
2->x2
x3 = 1:10
x3
x4
x4 = c(1,5,3,9)
x4
x4[2]
matrix(1:15, nrow = 3)
matrix(1:15, ncol = 3)
matrix(1:15, ncol = 3, byrow = T)
X5 = matrix(1:15, ncol = 3, byrow = T)
X5
X5[2,3]
X5[2:4,3]
X5[C(2,4),3]
X5[-C(2,4), 3]
X5[C(2,4) , 3]
X5 = matrix(1:15, ncol = 3, byrow = T)
X5
X5[C(2,4) , 3]
x5 = matrix(1:15, ncol = 3, byrow = T)
x5
x5[C(2,4) , 3]
x5[2:4,3]
x5[C(2,4), 3]
str(iris)
x5[(C(2,4)), 3]
x5[C(2,4), 3]
x1=c(1,2,3,4,5,4,3,6,7,1000)
sum(x1)/length(x1)
sum(x1)/length(x1) #mean 함수와 동일
mean(x1)
median(x1)
sample(1:45, 6, replace = F) #T는 복원 F는 비복원 (범위, 개수, 복원 OR 비복원)
ind = sample(1:nrow(iris), 150, replace = F) #iris 데이터 전체다
A1 = iris[ind, ]
View(iris) #미리보기
View(A1)
ind1 = sample(1:nrow(iris), nrow(iris)*0.7), replace = F) #전체데이터에서 70프로를 뽑아냄
ind1 = sample(1:nrow(iris), nrow(iris)*0.7, replace = F) #전체데이터에서 70프로를 뽑아냄
train = iris[ind1,]
test =iris[-ind1,]
summary(iris)
hist(iris$Petal.Length) #히스토그램
boxplot(iris[, 1:4]) #행생략되면 모든행을 나타냄
View(iris)
A2[, 1:4] = scale(iris[, 1:4])
A2 = iris
A2[, 1:4] = scale(iris[, 1:4])
View(A2)
A3 = iris
A3[1:100,] = scale(iris[1:100,])
View(iris)
str(iris)
nlevels(iris$Species)
levels(iris$Species)
library(MASS)
data(survey)
View(survey)
table(survey$Sex, survey$W.Hnd) #교차표 제작가능
table(survey$Sex, survey$Smoke)
prop.table(survey$Sex, survey$Smoke)
prop.table(t1)
t1 = table(survey$Sex, survey$Smoke) #추가로 각 주변합을 구해서 확률을 구할수 있음 -> 기대도수 기대확률
prop.table(t1)
prop.table(t1, 1) #여기안에는 배열 못넣음 테이블을 따로 변수로 지정해줘서 그 값을 넣어야함
prop.table(t1, 2)
barplot(t1)
plot(iris$Petal.Length, iris$Sepal.Length)
(nrow(iris$Sepal.Length)*0.1)/2
(length(iris$Sepal.Length)*0.1)/2
round(length(iris$Sepal.Length)*0.1)/2
round((length(iris$Sepal.Length)*0.1)/2,0)
sort(iris$Sepal.Length)[n+1:length(iris$Sepal.Length)-n]
n = round((length(iris$Sepal.Length)*0.1)/2,0)
sort(iris$Sepal.Length)[n+1:length(iris$Sepal.Length)-n]
x1 = sort(iris$Sepal.Length)[(n+1):length(iris$Sepal.Length)-n]
x1
str(x1)
x1 = sort(iris$Sepal.Length)[(n+1):length(iris$Sepal.Length)-n] #sort는 오름차순으로 정렬 그리고 대괄호부분은
x1
str(x1)
x1 = sort(iris$Sepal.Length)[(n+1):length(iris$Sepal.Length)-n)] #sort는 오름차순으로 정렬 그리고 대괄호부분은
x1 = sort(iris$Sepal.Length)[(n+1):(length(iris$Sepal.Length)-n)] #sort는 오름차순으로 정렬 그리고 대괄호부분은
x1
str(x1)
n1 = round((length(iris$Petal.Length)*0.1)/2,0)
y1 = sort(iris$Petal.Length)[(n1+1):(length(iris$Petal.Length)-n1)]
y1
plot(x1,y1)
plot(y1,x1)
hist(rnorm(1000, mean =100, sd = 3))
hist(rnorm(10000, mean =100, sd = 3))
hist(rnorm(100000, mean =100, sd = 3)) #데이터 개수 많아질수록 정규분포에 가까워짐
hist(rnorm(100000)) #데이터 개수 많아질수록 정규분포에 가까워짐
hist(rnorm(100000))
boxplot(iris[, 1:4]) #행생략되면 모든행을 나타냄 가운데 진한선이 중앙값
cor(iris[1,4])
cor(iris[1,4],)
cor(iris[,1:4])
cor.test(iris$Sepal.Length, iris$Petal.Length) #두 변수간 상관관계가 있는지 없는지
rm(list = ls() ) #지우고 싶을 때
txt = readLines('big.txt', encoding = 'UTF-8') #복수라인 읽어줌 엔터기준
txt = readLines('big.txt', encoding = 'UTF-8') #복수라인 읽어줌 엔터기준
setwd("C:/r_exam")
txt = readLines('big.txt', encoding = 'UTF-8') #복수라인 읽어줌 엔터기준
str(txt)
txt[10]
txt[12]
txt[13]
list1 = list(sp = 1, sp2 = c(1,3,5), y=c("A","B"))
list1
list1[1]
list1[2]
list1$sp2
list1[[2]]
list2 = list(x = list1, y = list1) #list안에 list넣기
str(list2)
list2[[1]]
list2[[1]][2]
list2[[1]][[2]]
str(txt)#txt데이터가 chr로 되어있음
nchar(txt)
txt0 = txt[nchar(txt)>1] #1초과인거만 뽑아냄
txt0
nchar(txt0)
installed.packages('KoNLP', dependencies = T)
install.packages("KoNLP")
library(KoNLP)
txt_n = extractNoun(txt0) #명사추출
str(txt_n)
txt_n
table(unlist(txt_n)) #빈도구하기 위해서 변수안에 변수는 안들어가서 리스트를 해제해줌
txt_t = table(unlist(txt_n)) #빈도구하기 위해서 변수안에 변수는 안들어가서 리스트를 해제해줌
txt_t
install.packages('wordcloud') #모양지정이 워드클라우드2
library(wordcloud)
wordcloud(names(txt_t), txt_t) #txt t 안에있는 이름을 가져옴
library("KoNLP", lib.loc="C:/Program Files/R/R-3.4.1/library")
useSejongDic()
wordcloud(names(txt_t), txt_t) #txt t 안에있는 이름을 가져옴
wordcloud(names(txt_t), txt_t) #txt t 안에있는 이름을 가져옴
txt1 = gsub("bigdata","빅데이터" , txt0) #bigdata를 빅데이터로 바꿔줌
txt1 = gsub("[A-z]", "" ,txt1) #대괄호 안에있는 모든걸 찾아라(영어를 모두 찾아라)
txt_n = extractNoun(txt1) #명사추출
str(txt_n) #어떤형태인지
txt_t = table(unlist(txt_n)) #빈도구하기 위해서 변수안에 변수는 안들어가서 리스트를 해제해줌
wordcloud(names(txt_t), txt_t) #txt t 안에있는 이름을 가져옴
txt1 = gsub("bigdata","빅데이터" , txt0) #bigdata를 빅데이터로 바꿔줌
txt1 = gsub("[A-z]", "" ,txt1) #대괄호 안에있는 모든걸 찾아라(영어를 모두 찾아라)
txt1 = gsub("[:digit:]", "", txt1) #대괄호는 패턴을 나타냄
txt1 = gsub("[:punct:]", "", txt1) #punct는 특수문자 digit는 숫자
txt1 = gsub("  ", " ", txt1)
txt_n = extractNoun(txt1) #명사추출
str(txt_n) #어떤형태인지
txt_t = table(unlist(txt_n)) #빈도구하기 위해서 변수안에 변수는 안들어가서 리스트를 해제해줌
wordcloud(names(txt_t), txt_t) #txt t 안에있는 이름을 가져옴
txt1 = gsub("bigdata","빅데이터" , txt0) #bigdata를 빅데이터로 바꿔줌
txt1 = gsub("[A-z]", "" ,txt1) #대괄호 안에있는 모든걸 찾아라(영어를 모두 찾아라)
txt1 = gsub("[[:digit:]]", "", txt1) #대괄호는 패턴을 나타냄
txt1 = gsub("[[:punct:]]", "", txt1) #punct는 특수문자 digit는 숫자
txt1 = gsub("  ", " ", txt1)
txt_n = extractNoun(txt1) #명사추출
str(txt_n) #어떤형태인지
txt_t = table(unlist(txt_n)) #빈도구하기 위해서 변수안에 변수는 안들어가서 리스트를 해제해줌
wordcloud(names(txt_t), txt_t) #txt t 안에있는 이름을 가져옴
library(KoNLP)
library(wordcloud)
setwd('C:/r_exam')
rm(list=ls())
txt = readlines('big.txt', encording = 'UTF-8')
txt = readLines('big.txt', encording = 'UTF-8')
txt = readLines('big.txt', encoding = 'UTF-8')
length(txt)
length(iris)
ncol(iris)
nrow(iris)
library("stringi", lib.loc="C:/Program Files/R/R-3.4.1/library")
library("stringr", lib.loc="C:/Program Files/R/R-3.4.1/library")
library(stringr)
library(stringi)
iris[iris$Sepal.Length > =6 ,]
iris[iris$Sepal.Length >= 6 ,]
iris[iris$Sepal.Length >= 6 , 1:2]
nchar(txt) > 1
library(KoNLP)
mergeUserDic(data.frame(c("빅데이터" , "ncn")))
buildDictionary(user_dic = data.frame(c("빅데이터" , "ncn")),  replace_usr_dic = T)
txt0 = str_to_lower(txt)
txt0
txt1 = gsbu("빅데이타", "빅데이터", txt0)
txt1 = gsub("bigdata", "빅데이터", txt1)
txt0 = str_to_lower(txt)
txt1 = gsbu("빅데이타", "빅데이터", txt0)
txt1 = gsub("빅데이타", "빅데이터", txt0)
txt1 = gsub("bigdata", "빅데이터", txt1)
txt1 = gsub("big data", "빅데이터", txt1)
txt1 = gsub("[[alnum]]", "", txt1)
txt1 = gsub("[[graph]]", "", txt1)
txt1 = gsub("[(a(\\d)+)]") #a로 시작하면서 숫자가 연속으로 나오는것. 숫자가 하나는 나와야함 \\d disit의 짧은 표현
gsub("  ", " ", txt)
txt1 = gsub("  ", " ", txt1)
txt1 = gsub("[[:alnum:]]", "", txt1)
txt1 = gsub("[[:digit:]]", "", txt1)
txt1 = gsub("[A-z]", "", txt1)
txt1 = gsub("[[:punct:]]", "", txt1)
txt1 = txt[str_length(txt1) > 1] #결과값이 t,f로 나옴
extractNoun(txt2) #명사추출결과는 list 형태로 나옴
txt2 = txt[str_length(txt1) > 1] #결과값이 t,f로 나옴
extractNoun(txt2) #명사추출결과는 list 형태로 나옴
txt2 = txt1[str_length(txt1) > 1] #결과값이 t,f로 나옴
extractNoun(txt2) #명사추출결과는 list 형태로 나옴
table(unlist())
txt_e = extractNoun(txt2) #명사추출결과는 list 형태로 나옴
txt_e
txt_t = table(unlist(txt_e)) #리스트를 해지하고 하나의 변수로 보아야함
txt_t
sort(txt_t, decreasing = T) #T는 내림차순 F는 오름차순
txt_s1 = txt_s[str_length(names(txt_s))>1] #1글자는 제외하고 싶음
txt_s = sort(txt_t, decreasing = T) #T는 내림차순 F는 오름차순
txt_s1 = txt_s[str_length(names(txt_s))>1] #1글자는 제외하고 싶음
head(txt_s1, 5)
txt_h = head(txt_s1, 5) #가장 빈도가 많은 5개
barplot(txt_h)#막대그래프 그림
pal = brewer.pal(7, "Set1") #색이름 ""안에 넣기
wordcloud(names(txt_s1), txt_s1, scale = c(5,0.5), col= pal,  min.preq = 2, random.order = F, rot.per = 0.2)
wordcloud(names(txt_s1), txt_s1, scale = c(5,0.5), col= pal,  min.preq = 2, random.order = F, rot.per = 0.2)
install.packages("wordcloud2")
x=5
if ( x >6 ) {
print (’TRUE ’)
print (’hello ’)
} else {
print (’FALSE ’)
print (’world ’)
}
x=5
if ( x >6 ) {
print ('TRUE ')
print ('hello '')
} else {
print ('FALSE '')
print ('world )
}
x=5
if ( x >6 ) {
print ('TRUE ')
print ('hello '')
} else {
print ('FALSE')
print ('world' )
}
x=5
if ( x >6 ) {
print ('TRUE ')
print ('hello ')
} else {
print ('FALSE')
print ('world' )
}
x %in% c(1,4,7,5)
sum = 0
for(i in seq(1,100,3)) {
sum = sum + i
print(sum)
}
s = array(dim=c(1,50))
str(s)
s = array(dim=c(1,50))
str(s)
for(i in 1:50 ){
if(iris[i, 1] > 7 ) {
s[1, i] = 1
} else {
s[1,i] = 0
}
}
s
s = array(dim=c(1,50))
str(s)
for(i in 1:50 ){
if(iris[i, 1] > 6.5 ) {
s[1, i] = 1
} else {
s[1,i] = 0
}
}
s
s1 = ifelse(iris$Sepal.Length > 7, 1, 0)
s1
ind1 = sample(1:150, 10, replace = T)  #복원추출
mean(ind1)
ind1 = sample(1:150, 10, replace = T)  #복원추출
mean(ind1)
m2 = c()
for(i in 1:100){
ind1 = sample(1:150, 10, replace = T)  #복원추출
m1 = mean(ind1)
m2 = c(m2,m1)
}
hist(m2)
mean(m2)
mean(1:150)
add = function(a,b){
add = a+b
return(add1)
}
add(5,3)
add = function(a,b){
add1 = a+b
return(add1)
}
add(5,3)
m2 = c()
for(i in 1:100){
ind1 = sample(1:150, 10, replace = T)  #복원추출
m1 = mean(ind1)
m2 = c(m1,m2)
}
hist(m2)
add = function(a,b){
add1 = paste(a+b) #문자면 paste(a,b)
return(add1)
}
add(김, 윤희)
add = function(a,b){
add1 = paste(a,b) #문자면 paste(a,b)
return(add1)
}
add(김, 윤희)
add = function(a,b){
add1 = paste(a,b) #문자면 paste(a,b)
return(add1)
}
add(김, 윤희)
add = function(a,b){
add1 = a+b #문자면 paste(a,b)
return(add1)
}
add(3,5 )
add2 = function(a,b){
if(is.numeric(a)== T) {
add = a+b
return(add)
}else {
add = paste(a, b, sep = " ") #sep 뒤에 오는 거가 글자사이에 들어감
return(add()
}
}
add2 = function(a,b){
if(is.numeric(a)== T) {
add = a+b
return(add)
}else {
add = paste(a, b, sep = " ") #sep 뒤에 오는 거가 글자사이에 들어감
return(add)
}
}
add0=add2(3,6)
add0
add0=add2(abc,sss)
add0=add2("abc","sss")
add0
add0=add2("a","4") #문자열은 "" 넣어주기
add0
add0=add2("a",4) #문자열은 "" 넣어주기
add0
5/3
5%%3
5%/%
5%/%3
5%/%3
pi
1:2*pi
1:(2*pi)
seq(0, 2*pi, 0.1)
x = seq(0, 2*pi, 0.1)
x = seq(0, 2*pi, 0.1)
y = sin(x) + rnorm(length(x))
plot(x,y)
x = seq(0, 2*pi, 0.01)
y = sin(x) + rnorm(length(x))
plot(x,y)
length(y)
data1 = read.table('clipboard', header = T)
data1
data2 = read.csv('data1.csv') #skip은 위에서 몇번째줄 데이터로 안읽고 header로 쓸지
data2
str(data2)
names(data2) = c("x1","x2") #복수값을 넣을때는 다 C를 사용
data2
install.packages("xlsx")
library(xlsx)
data3 = read.xlsx('data1.xlsx', sheetIndex = 1)
data3
iris3
str(iris3)
iris3[ , ,1]
iris3[1,1,]
install.packages("readbitmap")
library(readbitmap)
bmp1 = read.bitmap('img7.bmp')
dim(bmp1)
jpg1 = read.bitmap('img7.jpg')
dim(jpg1)
png1 = read.bitmap('img7.png')
dim(png1)
png1 = read.bitmap('img8.png')
dim(png1)
png1 = read.bitmap('img7.png')
jpg1_m = matrix(jpg1, nrow =1, byrow = T)
png1 = read.bitmap('img7.png', channel = 4)
png1 = read.bitmap('img7.png',channel = 4)
jpg1_m = matrix(jpg1, nrow =1, byrow = T)
png1_m = matrix(png1, nrow = 1, byrow = T)
dim(jpg1_m)
dim(png1_m)
jpg1_m[1:10]
list.dirs('.', full.names = T)
list.dirs('.', full.names = T)
for(i in 2:length(list1){
list.files('.', full.names =T , include.dirs = TRUE) #a1폴더 안에 있는
}
for(i in 2:length(list1)){
list.files('.', full.names =T , include.dirs = TRUE) #a1폴더 안에 있는
}
list1 = list.dirs('.', full.names = T)
for(i in 2:length(list1)){
list.files('.', full.names =T , include.dirs = TRUE) #a1폴더 안에 있는
}
list1 = list.dirs('.', full.names = T)
for(i in 2:length(list1)){
list2 = list.files('.', full.names =T , include.dirs = TRUE) #a1폴더 안에 있는
}
list2
for(i in 2:length(list1)){
list2 = list.files(list[i], full.names =T , pattern = '.jpg', include.dirs = TRUE) #a1폴더 안에 있는
}
for(i in 2:length(list1)){
list2 = list.files(list[i], full.names =T , pattern = '.jpg', include.dirs = TRUE)
}
list2 = list.files(list[i], full.names =T , pattern = '.jpg', include.dirs = TRUE)
list2 = list.files('.', full.names =T , include.dirs = F)
for(i in 2:length(list1)){
list2 = list.files('.', full.names =T , include.dirs = F)
}
list2
